//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;

use frame_support::{dispatch::DispatchResult, traits::Get, weights::{constants::RocksDbWeight, Weight}, Blake2_128Concat, StorageMap};
use frame_support::sp_runtime::BoundedVec;
use frame_support::pallet_prelude::{OptionQuery, IsType};
use frame_system::{ensure_signed, Account, Event};


/// Weight calculation trait defining the interface for weight computations
pub trait WeightInfo {
	/// Calculate weight for storing vector data
	/// Parameters:
	/// - vector_size: Size of the vector being stored
	/// - tag_count: Number of tags associated with the vector
	fn store_weight_data(vector_size: u32, tag_count: u32) -> Weight;
	/// Calculate weight for pruning operations
	/// Parameters:
	/// - removal_count: Number of vectors being removed
	fn prune_weight_data(removal_count: u32) -> Weight;
	/// Weight for retrieving weights by tag
	fn get_weights_by_tag(result_count: u32) -> Weight;
	/// Weight for retrieving weights by author
	fn get_weights_by_author(result_count: u32) -> Weight;
	/// Weight for handling weight-related errors
	fn weight_error() -> Weight;
}



/// Weights for pallet_template using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn store_weight_data(vector_size: u32, tag_count: u32) -> Weight {
		// Base weight for processing
		let mut weight = Weight::from_parts(9_000_000, 0);
		
		// Add weight for vector size processing
		weight = weight.saturating_add(Weight::from_parts(50_000, 0).saturating_mul(vector_size.into()));
		
		// Add weight for each tag
		weight = weight.saturating_add(Weight::from_parts(100_000, 0).saturating_mul(tag_count.into()));
		
		// Storage operations
		weight.saturating_add(T::DbWeight::get().writes(2_u64)) // One for vector, one for metadata
			.saturating_add(T::DbWeight::get().writes(tag_count.into())) // One write per tag
	}

	fn prune_weight_data(removal_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(500_000, 0).saturating_mul(removal_count.into()))
			.saturating_add(T::DbWeight::get().reads(removal_count.into()))
			.saturating_add(T::DbWeight::get().writes(removal_count.into()))
	}

	fn get_weights_by_tag(result_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(100_000, 0).saturating_mul(result_count.into()))
			.saturating_add(T::DbWeight::get().reads(result_count.saturating_add(1).into()))
	}

	fn get_weights_by_author(result_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(100_000, 0).saturating_mul(result_count.into()))
			.saturating_add(T::DbWeight::get().reads(result_count.saturating_add(1).into()))
	}

	fn weight_error() -> Weight {
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}


// For backwards compatibility and tests
impl WeightInfo for () {
	fn store_weight_data(_vector_size: u32, _tag_count: u32) -> Weight {
		Weight::from_parts(9_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn prune_weight_data(_removal_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn get_weights_by_tag(_result_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}

	fn get_weights_by_author(_result_count: u32) -> Weight {
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}

	fn weight_error() -> Weight {
		Weight::from_parts(6_000_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
